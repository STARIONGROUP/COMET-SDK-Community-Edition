// -------------------------------------------------------------------------------------------------------------------------------
// <copyright file="OpenIdConnectService.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2025 Starion Group S.A.
// 
//    Author: Sam Gerené, Alex Vorobiev, Alexander van Delft, Nathanael Smiechowski, Antoine Théate, Omar Elebiary, Jaime Bernar
// 
//    This file is part of CDP4-COMET SDK Community Edition
// 
//    The CDP4-COMET SDK Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
// 
//    The CDP4-COMET SDK Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
// 
//    You should have received a copy of the GNU Lesser General Public License
//    along with this program; if not, write to the Free Software Foundation,
//    Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
// </copyright>
// -------------------------------------------------------------------------------------------------------------------------------

namespace CDP4ServicesDal.ExternalAuthenticationProviderService
{
#if NETFRAMEWORK
    using System.ComponentModel.Composition;
#endif
    
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Text.Json;
    using System.Threading.Tasks;

    using CDP4Dal;
    using CDP4Dal.Utilities;

    using CDP4DalCommon.Authentication;

    /// <summary>
    /// The <see cref="OpenIdConnectService" /> provides open Id Connect interaction features
    /// </summary>
#if NETFRAMEWORK
    [Export(typeof(IProvideExternalAuthenticationService))]
    [PartCreationPolicy(CreationPolicy.NonShared)]
#endif
    public class OpenIdConnectService : IProvideExternalAuthenticationService
    {
        /// <summary>
        /// Gets the <see cref="System.Text.Json.JsonSerializerOptions" />
        /// </summary>
        private static readonly JsonSerializerOptions JsonSerializerOptions = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
        };

        /// <summary>
        /// Requests <see cref="AuthenticationToken" /> generated by an external provider, supporting the OpenID Connect standard
        /// </summary>
        /// <param name="code">The code that should be used to get <see cref="AuthenticationToken" /></param>
        /// <param name="authenticationSchemeResponse">The <see cref="AuthenticationSchemeResponse" /> used to get information about provider</param>
        /// <param name="redirectUri">An Optional redirect uri that should be used</param>
        /// <param name="clientSecret">An optional client secret</param>
        /// <returns>An <see cref="Task{TResult}" /> that have the retrieved <see cref="AuthenticationToken" /></returns>
        /// <remarks>If the <paramref name="redirectUri" /> is null or empty, the <paramref name="code" /> is considered as a refresh token</remarks>
        public async Task<AuthenticationToken> RequestAuthenticationToken(string code, AuthenticationSchemeResponse authenticationSchemeResponse, string redirectUri = null, string clientSecret = null)
        {
            Guard.ThrowIfNull(authenticationSchemeResponse, nameof(authenticationSchemeResponse));

            if (!authenticationSchemeResponse.Schemes.Contains(AuthenticationSchemeKind.ExternalJwtBearer))
            {
                throw new InvalidOperationException("Supported scheme should at least contains ExternalJwtBearer");
            }

            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(authenticationSchemeResponse.Authority);

            var parameters = new List<KeyValuePair<string, string>>
            {
                new("client_id", authenticationSchemeResponse.ClientId)
            };

            if (string.IsNullOrEmpty(redirectUri))
            {
                parameters.Add(new KeyValuePair<string, string>("grant_type", "refresh_token"));
                parameters.Add(new KeyValuePair<string, string>("refresh_token", code));
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>("redirect_uri", redirectUri));
                parameters.Add(new KeyValuePair<string, string>("grant_type", "authorization_code"));
                parameters.Add(new KeyValuePair<string, string>("code", code)); }

            if (!string.IsNullOrEmpty(clientSecret))
            {
                parameters.Add(new KeyValuePair<string, string>("client_secret", clientSecret));
            }

            var httpMessage = new HttpRequestMessage(HttpMethod.Post, new Uri($"{authenticationSchemeResponse.Authority.TrimEnd('/')}/protocol/openid-connect/token"));
            httpMessage.Content = new FormUrlEncodedContent(parameters);
            using var httpResponse = await httpClient.SendAsync(httpMessage);

            var statusCodeValue = (int)httpResponse.StatusCode;

            if (statusCodeValue is >= 200 and < 300)
            {
                var content = await httpResponse.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<AuthenticationToken>(content, JsonSerializerOptions);
            }

            throw new HttpRequestException($"Unable to get authentication token. Status Code: {statusCodeValue}, reason: {httpResponse.ReasonPhrase}");
        }
    }
}
