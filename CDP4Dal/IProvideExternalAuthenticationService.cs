// -------------------------------------------------------------------------------------------------------------------------------
// <copyright file="IProvideExternalAuthenticationService.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2025 Starion Group S.A.
// 
//    Author: Sam Gerené, Alex Vorobiev, Alexander van Delft, Nathanael Smiechowski, Antoine Théate, Omar Elebiary, Jaime Bernar
// 
//    This file is part of CDP4-COMET SDK Community Edition
// 
//    The CDP4-COMET SDK Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or (at your option) any later version.
// 
//    The CDP4-COMET SDK Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
// 
//    You should have received a copy of the GNU Lesser General Public License
//    along with this program; if not, write to the Free Software Foundation,
//    Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
// </copyright>
// -------------------------------------------------------------------------------------------------------------------------------

namespace CDP4Dal
{
    using System.Threading.Tasks;

    using CDP4DalCommon.Authentication;

    /// <summary>
    /// The <see cref="IProvideExternalAuthenticationService" /> provides <see cref="AuthenticationToken"/> exchange with an external authentication provider
    /// </summary>
    public interface IProvideExternalAuthenticationService
    {
        /// <summary>
        /// Requests <see cref="AuthenticationToken" /> generated by an external provider
        /// </summary>
        /// <param name="code">The code that should be used to get <see cref="AuthenticationToken" /></param>
        /// <param name="authenticationSchemeResponse">The <see cref="AuthenticationSchemeResponse" /> used to get information about provider</param>
        /// <param name="redirectUri">An Optional redirect uri that should be used</param>
        /// <param name="clientSecret">An optional client secret</param>
        /// <returns>An <see cref="Task" /> that have the retrieved <see cref="AuthenticationToken" /></returns>
        /// <remarks>If the <paramref name="redirectUri" /> is null or empty, the <paramref name="code" /> is considered as a refresh token</remarks>
        public Task<AuthenticationToken> RequestAuthenticationToken(string code, AuthenticationSchemeResponse authenticationSchemeResponse, string redirectUri = null,
            string clientSecret = null);
    }
}
